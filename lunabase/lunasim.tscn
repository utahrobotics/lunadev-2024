[gd_scene load_steps=19 format=3 uid="uid://bd2p5x2lp67bn"]

[ext_resource type="PackedScene" uid="uid://s8kxwa7b8f1t" path="res://ray_scanner.tscn" id="1_qti8w"]
[ext_resource type="PackedScene" uid="uid://c5hn62wsy0afm" path="res://waypoint.tscn" id="2_mr8o8"]
[ext_resource type="Texture2D" uid="uid://d4it3tpx2xqxq" path="res://icon.png" id="3_njuec"]
[ext_resource type="PackedScene" uid="uid://br8rl5vykae1n" path="res://boulder.tscn" id="4_1ge08"]

[sub_resource type="GDScript" id="GDScript_0y6bh"]
script/source = "extends CharacterBody3D


const WHEEL_SEPARATION := 0.3
const MOUSE_SENSITIVITY := 0.3
const SPEED := 0.5
const ACCEL := 0.8
const CONN_DELAY := 0.06
const DRAG_FACTOR := ACCEL / SPEED / SPEED

var conn: StreamPeerTCP

var conn_timer := CONN_DELAY

var waypoint: Vector2
var waypoint_provided := false
var send_waypoint := false
var user_accel: Vector3
var ang_vel: Quaternion

@onready var scanner: RayScanner = $RayScanner
@onready var waypoint_mesh: Node3D = $Node/Waypoint
@onready var estimated_mesh: Node3D = $Node/Estimated
@onready var sim_tab: Control = $\"../../../..\"
@onready var last_quat := quaternion
@onready var path_parent: Node = $Node/Path


func _input(event: InputEvent) -> void:
	if !sim_tab.is_visible_in_tree():
		return
	
	if event.is_action_pressed(\"ui_cancel\"):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
		return
	
	if event is InputEventMouseMotion and Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:
		event.relative /= -Vector2(get_viewport().size)
		event.relative = Vector2(sqrt(absf(event.relative.x)), sqrt(absf(event.relative.y))) * event.relative.sign()
		event.relative *= MOUSE_SENSITIVITY
		global_rotate(Vector3.UP, event.relative.x)
		scanner.rotation.x += event.relative.y
		#scanner.rotate_object_local(Vector3.RIGHT, event.relative.y)
	
	elif event.is_action_pressed(\"PlaceWaypoint\"):
		waypoint = Vector2(global_position.x, global_position.z)
		waypoint_provided = true
		waypoint_mesh.visible = true
		waypoint_mesh.global_position.x = global_position.x
		waypoint_mesh.global_position.z = global_position.z
		waypoint_mesh.global_position.y = 0
		return
	
	elif event.is_action_pressed(\"StartNavigation\"):
		send_waypoint = waypoint_provided
		return
	
	elif event.is_action(\"WalkForward\"):
		pass
	elif event.is_action(\"WalkBackwards\"):
		pass
	elif event.is_action(\"WalkLeft\"):
		pass
	elif event.is_action(\"WalkRight\"):
		pass
	else:
		return
	
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	
	user_accel = global_transform.basis.z * (Input.get_action_strength(\"WalkBackwards\") - Input.get_action_strength(\"WalkForward\")) + global_transform.basis.x * (Input.get_action_strength(\"WalkRight\") - Input.get_action_strength(\"WalkLeft\"))
	user_accel = user_accel.slide(Vector3.UP).normalized() * ACCEL
	user_accel += Vector3.DOWN * 9.81
	
	if conn == null:
		conn = StreamPeerTCP.new()
		var err := conn.connect_to_host(\"127.0.0.1\", 11433)
		if err != OK:
			push_error(\"Failed to connect to lunasimbot: %s\" % err)
			conn = null


var left_steering := 0.0
var right_steering := 0.0


func _physics_process(delta: float) -> void:
	if is_zero_approx(user_accel.slide(Vector3.DOWN).length()):
		velocity = velocity.move_toward(Vector3.ZERO, ACCEL * delta)
	else:
		velocity += (user_accel - velocity.normalized() * velocity.length_squared() * DRAG_FACTOR) * delta
	ang_vel = last_quat.inverse() * quaternion
	if ang_vel.get_axis().is_normalized():
		ang_vel = Quaternion(ang_vel.get_axis(), ang_vel.get_angle() / delta)
	else:
		ang_vel = Quaternion()
	last_quat = quaternion
	if conn != null:
		conn.poll()
	
	if conn_timer > 0.0:
		conn_timer -= delta
	else:
		conn_timer = CONN_DELAY
		if conn != null and conn.get_status() == StreamPeerTCP.STATUS_CONNECTED:
			conn.put_float(global_position.x)
			conn.put_float(global_position.y)
			conn.put_float(global_position.z)
			conn.put_float(velocity.x)
			conn.put_float(0.0)
			conn.put_float(velocity.z)
			conn.put_float(user_accel.x)
			conn.put_float(user_accel.y)
			conn.put_float(user_accel.z)
			conn.put_float(quaternion.w)
			conn.put_float(quaternion.x)
			conn.put_float(quaternion.y)
			conn.put_float(quaternion.z)
			conn.put_float(ang_vel.w)
			conn.put_float(ang_vel.x)
			conn.put_float(ang_vel.y)
			conn.put_float(ang_vel.z)
			conn.put_float(scanner.rotation.x)
			var points := scanner.scan()
			conn.put_u32(points.size())
			for point in points:
				conn.put_float(point.x)
				conn.put_float(point.y)
				conn.put_float(point.z)
			if send_waypoint:
				conn.put_8(255)
				conn.put_float(waypoint.x)
				conn.put_float(waypoint.y)
				send_waypoint = false
			else:
				conn.put_8(0)
			
			left_steering = conn.get_float()
			right_steering = conn.get_float()
			
			estimated_mesh.global_position = Vector3(conn.get_float(), conn.get_float(), conn.get_float())
			var w := conn.get_float()
			estimated_mesh.quaternion = Quaternion(conn.get_float(), conn.get_float(), conn.get_float(), w)
			
			var path_len := conn.get_u16()
			if path_len > 0:
				if path_parent.get_child_count() < path_len:
					for _i in range(path_len - path_parent.get_child_count()):
						path_parent.add_child(preload(\"res://arrow.tscn\").instantiate())
				else:
					for i in range(path_len, path_parent.get_child_count()):
						path_parent.get_child(i).queue_free()
				for i in range(path_len):
					var child: Node3D = path_parent.get_child(i)
					child.scale = Vector3.ONE
					child.rotation = Vector3.ONE
					child.global_position = Vector3(conn.get_float(), 0, conn.get_float())
					if i > 0:
						var last_child: Node3D = path_parent.get_child(i - 1)
						last_child.look_at(child.global_position)
						var distance := child.global_position.distance_to(last_child.global_position)
						last_child.global_position -= last_child.global_transform.basis.z * distance / 2
						last_child.scale.z = distance * 40
				
	
	velocity += - global_transform.basis.z.slide(Vector3.UP).normalized() * SPEED * (left_steering + right_steering) / 2
	var angle := (left_steering - right_steering) * SPEED / WHEEL_SEPARATION
	global_rotate(Vector3.UP, - angle * delta)
	#prints(left_steering, right_steering)
	
	move_and_slide()
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_u861d"]
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_mw3v4"]
albedo_color = Color(0.101961, 0.537255, 0.101961, 1)

[sub_resource type="PrismMesh" id="PrismMesh_6d518"]
material = SubResource("StandardMaterial3D_mw3v4")
size = Vector3(0.05, 0.05, 0.35)

[sub_resource type="PrismMesh" id="PrismMesh_cfju8"]
material = SubResource("StandardMaterial3D_mw3v4")
size = Vector3(0.05, 0.05, 0.35)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_s2y08"]
transparency = 1
shading_mode = 0
albedo_color = Color(1, 0.164706, 0.215686, 0.372549)

[sub_resource type="CapsuleMesh" id="CapsuleMesh_jrghj"]
material = SubResource("StandardMaterial3D_s2y08")
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_vyevn"]
albedo_color = Color(1, 0, 0.65098, 1)

[sub_resource type="SphereMesh" id="SphereMesh_g5hor"]
material = SubResource("StandardMaterial3D_vyevn")
radius = 0.05
height = 0.1

[sub_resource type="CylinderMesh" id="CylinderMesh_hn2h0"]
material = SubResource("StandardMaterial3D_vyevn")
top_radius = 0.01
bottom_radius = 0.03
height = 0.1

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_7fexe"]
albedo_color = Color(0.027451, 0.0235294, 0.0627451, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_hrbaw"]
material = SubResource("StandardMaterial3D_7fexe")
size = Vector2(20, 20)

[sub_resource type="WorldBoundaryShape3D" id="WorldBoundaryShape3D_yqe5l"]

[sub_resource type="Environment" id="Environment_bvywr"]
background_mode = 1
background_color = Color(0.00784314, 0.00784314, 0.00784314, 1)

[node name="Sim" type="VBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
layout_mode = 2
size_flags_vertical = 3
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
handle_input_locally = false
msaa_3d = 1
size = Vector2i(648, 621)
render_target_update_mode = 4

[node name="Node3D" type="Node3D" parent="SubViewportContainer/SubViewport"]

[node name="CharacterBody3D" type="CharacterBody3D" parent="SubViewportContainer/SubViewport/Node3D"]
script = SubResource("GDScript_0y6bh")

[node name="CollisionShape3D" type="CollisionShape3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
shape = SubResource("CapsuleShape3D_u861d")

[node name="RayScanner" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D" instance=ExtResource("1_qti8w")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
current = true
fov = 120.0

[node name="Center" type="Node3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D"]

[node name="Waypoint" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Center"]
transform = Transform3D(0, 0, 1, 0, 1, 0, -1, 0, 0, 0, 0, 0)
mesh = SubResource("PrismMesh_6d518")

[node name="Waypoint2" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Center"]
transform = Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)
mesh = SubResource("PrismMesh_cfju8")

[node name="Node" type="Node" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D"]

[node name="Waypoint" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node" instance=ExtResource("2_mr8o8")]
visible = false

[node name="Estimated" type="Node3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node/Estimated"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
mesh = SubResource("CapsuleMesh_jrghj")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node/Estimated"]
mesh = SubResource("SphereMesh_g5hor")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node/Estimated"]
transform = Transform3D(1, 0, 0, 0, 1.31134e-07, 1, 0, -1, 1.31134e-07, 0, 0, -0.0902355)
mesh = SubResource("CylinderMesh_hn2h0")

[node name="Path" type="Node" parent="SubViewportContainer/SubViewport/Node3D/CharacterBody3D/Node"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="SubViewportContainer/SubViewport/Node3D"]
layers = 2
mesh = SubResource("PlaneMesh_hrbaw")

[node name="Decal" type="Decal" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D"]
size = Vector3(15, 1, 15)
texture_albedo = ExtResource("3_njuec")
cull_mask = 1048574

[node name="StaticBody3D" type="StaticBody3D" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D/StaticBody3D"]
shape = SubResource("WorldBoundaryShape3D_yqe5l")

[node name="Boulder" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("4_1ge08")]

[node name="Boulder2" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("4_1ge08")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.13333, -0.296974, -0.871875)

[node name="Boulder3" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("4_1ge08")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.42865, -0.424198, 2.11976)

[node name="Boulder4" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D" instance=ExtResource("4_1ge08")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.30077, -0.203136, 2.17333)

[node name="Marker3D" type="Marker3D" parent="SubViewportContainer/SubViewport/Node3D/MeshInstance3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.81, 0, -3.1)

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="SubViewportContainer/SubViewport/Node3D"]
transform = Transform3D(0.243107, -0.860673, 0.44737, 3.6215e-11, 0.461207, 0.887293, -0.969999, -0.215707, 0.112123, 0, 1.80059, 0)
shadow_enabled = true
directional_shadow_mode = 1

[node name="WorldEnvironment" type="WorldEnvironment" parent="SubViewportContainer/SubViewport/Node3D"]
environment = SubResource("Environment_bvywr")

[node name="HBoxContainer" type="HBoxContainer" parent="."]
layout_mode = 2
theme_override_constants/separation = 15

[node name="Label" type="Label" parent="HBoxContainer"]
layout_mode = 2
text = "Not Connected
"
